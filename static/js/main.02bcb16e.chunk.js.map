{"version":3,"sources":["styles/App.module.scss","styles/Travels.module.scss","scripts/utils.js","components/TravelElement.js","components/TravelList.js","components/Utgifter.js","components/CalculationResult.js","components/TravelCalculator.js","components/CalculatorInfo.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","data","a","fetch","method","headers","body","JSON","stringify","response","json","kmIsValid","km","erTall","antallIsValid","antall","value","isNaN","generateKey","prefix","Date","getTime","TravelElement","calculation","setCalculation","travelElement","name","title","useState","feilmelding","setFeilmelding","setIsEditing","toggleValue","updatedTravels","map","item","key","isEditing","prev","className","styles","input_container_li","type","onChange","e","target","Number","errorMessage_li","onClick","toLowerCase","slice","filter","TravelList","subform_title","autoComplete","travel_form","onSubmit","preventDefault","currentTarget","elements","reisePairIsValid","travelsNew","input_container","errorMessage","travel_list","length","Utgifter","utgifterBomFergeEtc","utgift","utgifter","errorMessage_utgift","CalculationResult","calculationResult","resultDisplay","TravelCalculator","initialCalculation","arbeidsreiser","besoeksreiser","setCalculationResult","calculationForAPI","postCalculation","then","reisefradrag","window","scrollBy","catch","error","alert","console","log","CalculatorInfo","info_section","App","App_header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02bcb16e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__39lVC\",\"App_header\":\"App_App_header__2wYIu\",\"App-link\":\"App_App-link__LT79h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info_section\":\"Travels_info_section__2OeFf\",\"subform_title\":\"Travels_subform_title__35JIy\",\"input_container\":\"Travels_input_container__1Zt3t\",\"input_container_li\":\"Travels_input_container_li__1uf8P\",\"travel_form\":\"Travels_travel_form__1IPmi\",\"travel_list\":\"Travels_travel_list__1sC5E\",\"errorMessage\":\"Travels_errorMessage__1SlVV\",\"errorMessage_li\":\"Travels_errorMessage_li__1fPee\",\"errorMessage_utgift\":\"Travels_errorMessage_utgift__FTvKh\",\"resultDisplay\":\"Travels_resultDisplay__1v4sh\"};","export async function postCalculation(data) {\r\n  const url =\r\n    \"https://9f22opit6e.execute-api.us-east-2.amazonaws.com/default/reisefradrag\";\r\n  const response = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n}\r\n\r\nexport function reisePairIsValid(km, antall) {\r\n  //return erTall(km) && km > 0 && erTall(antall) && antall > 0;\r\n  return kmIsValid(km) && antallIsValid(antall);\r\n}\r\n\r\nexport function kmIsValid(km) {\r\n  return erTall(km) && km > 0;\r\n}\r\n\r\nexport function antallIsValid(antall) {\r\n  return erTall(antall) && antall > 0;\r\n}\r\n\r\nexport function utgifterIsValid(utgift) {\r\n  return erTall(utgift) || utgift === \"\";\r\n}\r\n\r\nfunction erTall(value) {\r\n  return !isNaN(value);\r\n}\r\n\r\nexport function generateKey(prefix) {\r\n  const stamp = new Date().getTime();\r\n  return prefix + \"_\" + stamp;\r\n}\r\n","import styles from \"../styles/Travels.module.scss\";\r\nimport { generateKey, kmIsValid, antallIsValid } from \"../scripts/utils\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function TravelElement({\r\n  calculation,\r\n  setCalculation,\r\n  travelElement,\r\n  name,\r\n  title,\r\n}) {\r\n  // Will keep track of validation error on user input for conditional rendering\r\n  const [feilmelding, setFeilmelding] = useState({ km: false, antall: false });\r\n\r\n  // Function to delete a spesific travel-type element from\r\n  //     corresponding travel-type array within calculation state\r\n  const deleteTravel = () => {\r\n    const updatedTravels = calculation[name].filter(\r\n      (item) => item.key !== travelElement.key\r\n    );\r\n\r\n    setCalculation((prev) => {\r\n      return {\r\n        ...prev,\r\n        [name]: [...updatedTravels],\r\n      };\r\n    });\r\n  };\r\n\r\n  // Function to toggle editing of spesific list element true/false\r\n  const setIsEditing = (toggleValue) => {\r\n    const updatedTravels = calculation[name].map((item) => {\r\n      if (item.key === travelElement.key) {\r\n        return {\r\n          ...item,\r\n          isEditing: toggleValue,\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    setCalculation((prev) => {\r\n      return {\r\n        ...prev,\r\n        [name]: [...updatedTravels],\r\n      };\r\n    });\r\n  };\r\n\r\n  // Function to update km attribute of a travel-element\r\n  //     Should be joined to one function together with updateAntall\r\n  const updateKm = (e) => {\r\n    // Set value for ease of reference\r\n    const km = e.target.value;\r\n    // Validate input\r\n    if (!kmIsValid(km)) {\r\n      setFeilmelding((prev) => {\r\n        return {\r\n          ...prev,\r\n          km: true,\r\n        };\r\n      });\r\n      return;\r\n    }\r\n\r\n    const updatedTravels = calculation[name].map((item) => {\r\n      if (item.key === travelElement.key) {\r\n        return {\r\n          ...item,\r\n          km: Number(e.target.value),\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    setCalculation((prev) => ({\r\n      ...prev,\r\n      [name]: [...updatedTravels],\r\n    }));\r\n  };\r\n\r\n  // Function to update antall attribute of a travel-element\r\n  //     Should be joined to one function together with updateKm\r\n  const updateAntall = (e) => {\r\n    // Set value for easy ref.\r\n    const antall = e.target.value;\r\n    // Validate input\r\n    if (!antallIsValid(antall)) {\r\n      setFeilmelding((prev) => {\r\n        return {\r\n          ...prev,\r\n          antall: true,\r\n        };\r\n      });\r\n      return;\r\n    }\r\n\r\n    const updatedTravels = calculation[name].map((item) => {\r\n      if (item.key === travelElement.key) {\r\n        return {\r\n          ...item,\r\n          antall: Number(e.target.value),\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    setCalculation((prev) => ({\r\n      ...prev,\r\n      [name]: [...updatedTravels],\r\n    }));\r\n  };\r\n\r\n  // Renders list elements of travel-type\r\n  //    with possibility to update and delete\r\n  return (\r\n    <li key={generateKey(`${travelElement.key}_li`)}>\r\n      {!travelElement.isEditing ? (\r\n        <>\r\n          <p>km: {travelElement.km}</p>\r\n          <p>Antall: {travelElement.antall}</p>\r\n          <button onClick={() => setIsEditing(true)}>\r\n            Endre {title.toLowerCase().slice(0, -1)}\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <div className={styles.input_container_li}>\r\n            <label>\r\n              km:\r\n              <input\r\n                name=\"km\"\r\n                type=\"text\"\r\n                value={travelElement.km}\r\n                onChange={updateKm}\r\n              />\r\n            </label>\r\n            {feilmelding.km && (\r\n              <p className={styles.errorMessage_li}>\r\n                Må være et tall større enn null\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className={styles.input_container_li}>\r\n            <label>\r\n              Antall:\r\n              <input\r\n                name=\"antall\"\r\n                type=\"text\"\r\n                value={travelElement.antall}\r\n                onChange={updateAntall}\r\n              />\r\n            </label>\r\n            {feilmelding.antall && (\r\n              <p className={styles.errorMessage_li}>\r\n                Må være et tall større enn null\r\n              </p>\r\n            )}\r\n          </div>\r\n          <button onClick={() => setIsEditing(false)}>Lagre</button>\r\n        </>\r\n      )}\r\n      <button onClick={deleteTravel}>Slett</button>\r\n    </li>\r\n  );\r\n}\r\n","import styles from \"../styles/Travels.module.scss\";\r\nimport { generateKey, reisePairIsValid } from \"../scripts/utils\";\r\nimport TravelElement from \"./TravelElement\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function TravelList({\r\n  calculation,\r\n  setCalculation,\r\n  name,\r\n  title,\r\n}) {\r\n  // State \"feilmelding\" will keep track of validation error\r\n  //    on user input for conditional rendering of error message\r\n  const [feilmelding, setFeilmelding] = useState(false);\r\n  const handleOnSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Set value of inputs to variables for ease of reference\r\n    const km = e.currentTarget?.elements.km.value;\r\n    const antall = e.currentTarget?.elements.antall.value;\r\n\r\n    // Validate inputs\r\n    if (!reisePairIsValid(km, antall)) {\r\n      setFeilmelding(true);\r\n      return;\r\n    } else if (feilmelding === true) {\r\n      setFeilmelding(false);\r\n    }\r\n\r\n    // Create a new element for corresponding state travel-type array\r\n    //    input is cast to number to allow for input-type = text (avoiding arrows on number input)\r\n    const travelsNew = {\r\n      km: Number(km),\r\n      antall: Number(antall),\r\n      key: generateKey(name),\r\n      isEditing: false,\r\n    };\r\n\r\n    // Update state\r\n    setCalculation((prev) => ({\r\n      ...prev,\r\n      [name]: [...prev[name], travelsNew],\r\n    }));\r\n\r\n    // Clear input fields\r\n    e.currentTarget.elements.km.value = \"\";\r\n    e.currentTarget.elements.antall.value = \"\";\r\n  };\r\n\r\n  // Function to clear travel-type array in state\r\n  const clearTravels = () => {\r\n    setCalculation((prev) => ({\r\n      ...prev,\r\n      [name]: [],\r\n    }));\r\n  };\r\n\r\n  // Render out the form to add elements of corresponding travel-type\r\n  //    and present the list of already-made elements\r\n  return (\r\n    <section>\r\n      <h3 className={styles.subform_title}>{title}</h3>\r\n\r\n      <form\r\n        autoComplete=\"off\"\r\n        className={styles.travel_form}\r\n        onSubmit={handleOnSubmit}\r\n      >\r\n        <div className={styles.input_container}>\r\n          <label>\r\n            Lengde i km:\r\n            <input name=\"km\" type=\"text\" />\r\n          </label>\r\n        </div>\r\n        <div className={styles.input_container}>\r\n          <label>\r\n            Antall forekomster av denne reisen:\r\n            <input name=\"antall\" type=\"text\" />\r\n          </label>\r\n        </div>\r\n        {feilmelding && <p className={styles.errorMessage}>Ugyldige verdier</p>}\r\n        <button>Legg til</button>\r\n      </form>\r\n\r\n      <ul className={styles.travel_list}>\r\n        {calculation[name]?.length > 0 &&\r\n          calculation[name].map((item) => (\r\n            <TravelElement\r\n              key={generateKey(`TravelListElement_${item.key}`)}\r\n              calculation={calculation}\r\n              setCalculation={setCalculation}\r\n              travelElement={item}\r\n              name={name}\r\n              title={title}\r\n            />\r\n          ))}\r\n      </ul>\r\n\r\n      <button onClick={clearTravels}>\r\n        Tøm listen over {title.toLowerCase()}\r\n      </button>\r\n    </section>\r\n  );\r\n}\r\n","import styles from \"../styles/Travels.module.scss\";\r\nimport { useState } from \"react\";\r\nimport { utgifterIsValid } from \"../scripts/utils\";\r\n\r\nexport default function Utgifter({ calculation, setCalculation }) {\r\n  // Will keep track of validation error on user input for conditional rendering\r\n  const [feilmelding, setFeilmelding] = useState(false);\r\n\r\n  // Handles onChange of input field for calculation.utgifterBomFergeEtc\r\n  //    Controlled component with validation\r\n  const handleOnChange = (e) => {\r\n    // Set value for easy ref.\r\n    const utgifter = e.target.value;\r\n    // Validate input\r\n    if (!utgifterIsValid(utgifter)) {\r\n      setFeilmelding(true);\r\n      return;\r\n    } else if (feilmelding === true) {\r\n      setFeilmelding(false);\r\n    }\r\n\r\n    // Casts from text to number to avoid having pre-set value of 0 in input field\r\n    setCalculation((prev) => ({\r\n      ...prev,\r\n      utgifterBomFergeEtc: Number(utgifter),\r\n    }));\r\n  };\r\n\r\n  // Renders the Utgifter section with an input field for calculation.utgifterBomFergeEtc\r\n  return (\r\n    <section>\r\n      <h3 className={styles.subform_title}>Utgifter</h3>\r\n      <div className={styles.input_container}>\r\n        <label>\r\n          Sum av utgifter for bom, ferge, etc...\r\n          <input\r\n            autoComplete=\"off\"\r\n            name=\"utgifter\"\r\n            type=\"text\"\r\n            value={calculation.utgifterBomFergeEtc}\r\n            onChange={handleOnChange}\r\n          />\r\n          {feilmelding && (\r\n            <p className={styles.errorMessage_utgift}>Må være et tall</p>\r\n          )}\r\n        </label>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import styles from \"../styles/Travels.module.scss\";\r\n\r\nexport default function CalculationResult(calculationResult) {\r\n  // Renders conditional outputs for the user depending on result of calculation\r\n  if (calculationResult.calculationResult === 0) {\r\n    return (\r\n      <section>\r\n        <h3>Resultat</h3>\r\n        <p>Du får ingen reisefradrag for gjeldende reiser og utgifter.</p>\r\n      </section>\r\n    );\r\n  }\r\n  return (\r\n    <section>\r\n      <h3>Resultat</h3>\r\n      <p>Ditt reisefradrag er beregnet til:</p>\r\n      <p\r\n        className={styles.resultDisplay}\r\n      >{`${calculationResult.calculationResult},-`}</p>\r\n    </section>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport TravelList from \"./TravelList\";\r\nimport Utgifter from \"./Utgifter\";\r\nimport { postCalculation } from \"../scripts/utils\";\r\nimport CalculationResult from \"./CalculationResult\";\r\n\r\nexport default function TravelCalculator() {\r\n  // Consts for initializing and resetting states\r\n  const initialCalculation = {\r\n    arbeidsreiser: [],\r\n    besoeksreiser: [],\r\n    utgifterBomFergeEtc: \"\",\r\n  };\r\n  const initialCalculationResult = -1;\r\n\r\n  // State \"calculation\" holds user inputs that will\r\n  //    be parsed and passed to the API, which in turn\r\n  //    returns a result saved in the state object \"calculationResult\"\r\n  const [calculation, setCalculation] = useState(initialCalculation);\r\n  const [calculationResult, setCalculationResult] = useState(\r\n    initialCalculationResult\r\n  );\r\n\r\n  // Handles submitting of calculation on button press\r\n  const handleOnSubmit = () => {\r\n    // Object to hold body of API call\r\n    const calculationForAPI = {\r\n      arbeidsreiser: [],\r\n      besoeksreiser: [],\r\n      utgifterBomFergeEtc: 0,\r\n    };\r\n\r\n    // Map attributes from arbeidsreiser, besoeksreiser, and\r\n    //    utgifter from state object calculation\r\n    calculationForAPI.arbeidsreiser = calculation.arbeidsreiser.map(\r\n      ({ key, isEditing, ...stripped }) => stripped\r\n    );\r\n    calculationForAPI.besoeksreiser = calculation.besoeksreiser.map(\r\n      ({ key, isEditing, ...stripped }) => stripped\r\n    );\r\n    // calculation.utgifterBomFergeEtc is initially set to an empty string-\r\n    // to keep its related input field empty. API accepts only 0 as a valid \"empty\" value\r\n    if (calculation.utgifterBomFergeEtc === \"\") {\r\n      calculationForAPI.utgifterBomFergeEtc = 0;\r\n    } else {\r\n      calculationForAPI.utgifterBomFergeEtc = calculation.utgifterBomFergeEtc;\r\n    }\r\n\r\n    postCalculation(calculationForAPI)\r\n      .then((response) => {\r\n        setCalculationResult(response.reisefradrag);\r\n        // Scroll down on page to display result\r\n        window.scrollBy(0, 400);\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Her har det skjedd en feil!\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // Function to clear states\r\n  // Used to reset the form\r\n  const clearCalculation = () => {\r\n    setCalculation(initialCalculation);\r\n    setCalculationResult(initialCalculationResult);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div key=\"keykey\">\r\n        <TravelList\r\n          calculation={calculation}\r\n          setCalculation={setCalculation}\r\n          name={\"arbeidsreiser\"}\r\n          title={\"Arbeidsreiser\"}\r\n        />\r\n\r\n        <TravelList\r\n          calculation={calculation}\r\n          setCalculation={setCalculation}\r\n          name={\"besoeksreiser\"}\r\n          title={\"Besøksreiser\"}\r\n        />\r\n\r\n        <Utgifter calculation={calculation} setCalculation={setCalculation} />\r\n\r\n        <section>\r\n          <button onClick={handleOnSubmit}>Kalkuler</button>\r\n          <button onClick={clearCalculation}>Start med blanke ark</button>\r\n        </section>\r\n\r\n        {calculationResult >= 0 && (\r\n          <CalculationResult calculationResult={calculationResult} />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import styles from \"../styles/Travels.module.scss\";\r\n\r\nexport default function CalculatorInfo() {\r\n  return (\r\n    <section className={styles.info_section}>\r\n      <h3>Reisefradraget beregnes som følger</h3>\r\n      <p>\r\n        Totalt antall kilometer beregnes for alle arbeids- og besøksreiser. Øvre\r\n        grense er 75 000 kilometer\r\n      </p>\r\n      <p>\r\n        Det gis kr 1,50/km i fradrag for reiser opp til 50 000 km, deretter 0,70\r\n        kr opp til 75 000 km\r\n      </p>\r\n      <p>\r\n        Hvis utgifter til bom, ferge etc. overstiger kr 3 400 så gis hele\r\n        beløpet i fradrag, ellers gis ingenting\r\n      </p>\r\n      <p>\r\n        Fra summen av kilometerfradraget og utgifter til bom, ferge etc. trekkes\r\n        fra en egenandel på kr 22 000.\r\n      </p>\r\n      <p>Resten er reisefradraget.</p>\r\n    </section>\r\n  );\r\n}\r\n","import styles from \"./styles/App.module.scss\";\nimport TravelCalculator from \"./components/TravelCalculator\";\nimport CalculatorInfo from \"./components/CalculatorInfo\";\n\nfunction App() {\n  return (\n    <div className={styles.App}>\n      <header className={styles.App_header}>\n        <h1>Reisefradragsberegning 💸</h1>\n      </header>\n      <main>\n        <CalculatorInfo />\n        <TravelCalculator />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}